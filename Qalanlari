# 7. chocolateFeast
def chocolateFeast(n: int, c: int, m: int) -> int:
    chocolates = n // c
    wrappers = chocolates
    while wrappers >= m:
        exchange = wrappers // m
        chocolates += exchange
        wrappers = wrappers % m + exchange
    return chocolates

# 8. closestNumbers
def closestNumbers(arr: list[int]) -> list[int]:
    arr.sort()
    min_diff = min(arr[i+1]-arr[i] for i in range(len(arr)-1))
    result = []
    for i in range(len(arr)-1):
        if arr[i+1] - arr[i] == min_diff:
            result.extend([arr[i], arr[i+1]])
    return result

# 9. compare_swaps_bubble_insertion_sort
def compare_swaps_bubble_insertion_sort(arr):
    def bubble(arr):
        swaps = 0
        a = arr[:]
        n = len(a)
        for i in range(n):
            for j in range(n-1-i):
                if a[j] > a[j+1]:
                    a[j], a[j+1] = a[j+1], a[j]
                    swaps += 1
        return swaps

    def insertion(arr):
        swaps = 0
        a = arr[:]
        for i in range(1, len(a)):
            key = a[i]
            j = i - 1
            while j >= 0 and a[j] > key:
                a[j+1] = a[j]
                swaps += 1
                j -= 1
            a[j+1] = key
        return swaps

    if insertion(arr) <= bubble(arr):
        return "insertion"
    else:
        return "bubble"

# 10. count_special_problems
def count_special_problems(n: int, k: int, arr: list[int]) -> int:
    count = 0
    page = 1
    for problems in arr:
        for problem in range(1, problems+1):
            if problem == page:
                count += 1
            if problem % k == 0:
                page += 1
        if problems % k != 0:
            page += 1
    return count

# 11. findPoisonedDuration
def findPoisonedDuration(timeSeries: list[int], duration: int) -> int:
    total = 0
    for i in range(len(timeSeries)-1):
        total += min(timeSeries[i+1]-timeSeries[i], duration)
    total += duration
    return total

# 12. find_common_strings_with_least_index_sum
def find_common_strings_with_least_index_sum(list1: list[str], list2: list[str]) -> list[str]:
    idx_map = {v: i for i, v in enumerate(list1)}
    min_sum = float('inf')
    result = []
    for j, v in enumerate(list2):
        if v in idx_map:
            s = idx_map[v] + j
            if s < min_sum:
                min_sum = s
                result = [v]
            elif s == min_sum:
                result.append(v)
    return result

# 13. flood_fill
def flood_fill(image: list[list[int]], sr: int, sc: int, color: int) -> list[list[int]]:
    original = image[sr][sc]
    if original == color:
        return image
    rows, cols = len(image), len(image[0])
    def dfs(r, c):
        if r < 0 or r >= rows or c < 0 or c >= cols or image[r][c] != original:
            return
        image[r][c] = color
        dfs(r+1, c)
        dfs(r-1, c)
        dfs(r, c+1)
        dfs(r, c-1)
    dfs(sr, sc)
    return image

# 14. gameOfStones
def gameOfStones(n: int) -> str:
    # If stones mod 7 is 0 or 1, second player wins
    return "Second" if n % 7 in (0,1) else "First"

# 15. happyLadybugs
def happyLadybugs(b: str) -> str:
    from collections import Counter
    if b == "_":
        return "YES"
    count = Counter(b)
    if any(v == 1 for k,v in count.items() if k != "_"):
        return "NO"
    if "_" not in count:
        for i in range(1, len(b)-1):
            if b[i] != b[i-1] and b[i] != b[i+1]:
                return "NO"
    return "YES"

# 16. howManyGames
def howManyGames(p: int, d: int, m: int, s: int) -> int:
    count = 0
    price = p
    while s >= price:
        s -= price
        count += 1
        price = max(m, price - d)
    return count

# 17. icecreamParlor
def icecreamParlor(m: int, cost: list[int]) -> list[int]:
    seen = {}
    for i, c in enumerate(cost):
        if m - c in seen:
            return [seen[m - c] + 1, i + 1]
        seen[c] = i
    return []

# 18. isValidStringSameOccurence
def isValidStringSameOccurence(s: str) -> str:
    from collections import Counter
    count = Counter(s)
    freq = Counter(count.values())
    if len(freq) == 1:
        return "YES"
    elif len(freq) == 2:
        key1, key2 = freq.keys()
        if (freq[key1] == 1 and (key1 - 1 == key2 or key1 == 1)) or \
           (freq[key2] == 1 and (key2 - 1 == key1 or key2 == 1)):
            return "YES"
    return "NO"

# 19. k_closest
def k_closest(points: list[list[int]], k: int) -> list[list[int]]:
    points.sort(key=lambda p: p[0]*p[0] + p[1]*p[1])
    return points[:k]

# 20. largestPermutation
def largestPermutation(k: int, arr: list[int]) -> list[int]:
    n = len(arr)
    pos = {v:i for i,v in enumerate(arr)}
    for i in range(n):
        if k == 0:
            break
        if arr[i] == n - i:
            continue
        to_swap_idx = pos[n - i]
        pos[arr[i]] = to_swap_idx
        arr[to_swap_idx], arr[i] = arr[i], arr[to_swap_idx]
        pos






ChatGPT said:
[n - i] = i
k -= 1
return arr

21. makeAnagram
def makeAnagram(a: str, b: str) -> int:
from collections import Counter
ca = Counter(a)
cb = Counter(b)
return sum(abs(ca[ch] - cb[ch]) for ch in set(a+b))

22. mergeStringsAlternately
def mergeStringsAlternately(word1: str, word2: str) -> str:
result = []
i, j = 0, 0
while i < len(word1) or j < len(word2):
if i < len(word1):
result.append(word1[i])
i += 1
if j < len(word2):
result.append(word2[j])
j += 1
return ''.join(result)

23. minimumBribes
def minimumBribes(q: list[int]) -> str:
bribes = 0
for i in range(len(q)-1, -1, -1):
if q[i] - (i + 1) > 2:
return "Too chaotic"
for j in range(max(0, q[i] - 2), i):
if q[j] > q[i]:
bribes += 1
return str(bribes)

24. minTime
def minTime(machines: list[int], goal: int) -> int:
left, right = 1, min(machines)*goal
while left < right:
mid = (left + right) // 2
if sum(mid // machine for machine in machines) >= goal:
right = mid
else:
left = mid + 1
return left

25. missingNumbers
def missingNumbers(arr: list[int], brr: list[int]) -> list[int]:
from collections import Counter
count_arr = Counter(arr)
count_brr = Counter(brr)
missing = [num for num in count_brr if count_brr[num] > count_arr.get(num, 0)]
return sorted(missing)

26. minimumSwaps
def minimumSwaps(arr: list[int]) -> int:
swaps = 0
i = 0
while i < len(arr):
if arr[i] != i + 1:
temp = arr[i]
arr[i], arr[temp-1] = arr[temp-1], arr[i]
swaps += 1
else:
i += 1
return swaps

27. nonDivisibleSubset
def nonDivisibleSubset(k: int, s: list[int]) -> int:
freq = [0]*k
for num in s:
freq[num % k] += 1
count = min(freq[0], 1)
for i in range(1, (k+1)//2):
count += max(freq[i], freq[k-i])
if k % 2 == 0:
count += 1 if freq[k//2] > 0 else 0
return count

28. pairs
def pairs(k: int, arr: list[int]) -> int:
s = set(arr)
count = 0
for num in arr:
if num + k in s:
count += 1
return count

29. pangrams
def pangrams(s: str) -> str:
s = s.lower()
letters = set(ch for ch in s if ch.isalpha())
return "pangram" if len(letters) == 26 else "not pangram"

30. plusMinus
def plusMinus(arr: list[int]) -> tuple[float, float, float]:
n = len(arr)
pos = sum(1 for x in arr if x > 0)
neg = sum(1 for x in arr if x < 0)
zero = n - pos - neg
return (pos/n, neg/n, zero/n)

31. repeatedString
def repeatedString(s: str, n: int) -> int:
count_a = s.count('a')
times = n // len(s)
remainder = n % len(s)
return times * count_a + s[:remainder].count('a')

32. reverseArray
def reverseArray(a: list[int]) -> list[int]:
return a[::-1]

33. sockMerchant
def sockMerchant(n: int, ar: list[int]) -> int:
from collections import Counter
count = Counter(ar)
return sum(v // 2 for v in count.values())
